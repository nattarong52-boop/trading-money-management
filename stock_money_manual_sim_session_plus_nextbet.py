import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import math
import random
from io import StringIO
from datetime import datetime

st.set_page_config(page_title="‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° + Next Bet)", page_icon="üìà")

st.title("üìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏∏‡πâ‡∏ô (‡∏û‡∏∏‡∏ò=‡∏ã‡∏∑‡πâ‡∏≠, ‡∏Ñ‡∏≠=‡∏Ç‡∏≤‡∏¢) ‚Äì ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏° + Next Bet")
st.markdown("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå **‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° Undo / ‡∏•‡πá‡∏≠‡∏Å Pattern / Export-Import CSV")

# ===================== Session Init =====================
defaults = {
    "results": [],
    "balance": None,
    "bet_amount": None,
    "loss_streak_amount": 0,
    "patterns": [],
    "locked_patterns": False,
    "inputs_snapshot": {},
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# ===================== Sidebar Controls =====================
st.sidebar.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
locked = st.sidebar.checkbox("üîí ‡∏•‡πá‡∏≠‡∏Å Pattern (‡πÑ‡∏°‡πà‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï)", value=st.session_state.locked_patterns)
st.session_state.locked_patterns = locked

if st.sidebar.button("üé≤ ‡∏™‡∏∏‡πà‡∏° Pattern ‡πÉ‡∏´‡∏°‡πà", use_container_width=True):
    st.session_state.patterns = []  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏° num_trades

if st.sidebar.button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏• (Clear Results)", use_container_width=True):
    st.session_state.results = []
    st.session_state.balance = None
    st.session_state.bet_amount = None
    st.session_state.loss_streak_amount = 0

# ===================== Inputs =====================
capital = st.number_input("üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=10.0, value=1000.0, step=10.0)
num_trades = st.number_input("üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á", min_value=1, value=5, step=1)
target_profit = st.number_input("üéØ ‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö (‡∏ö‡∏≤‡∏ó)", min_value=0.1, value=1.0, step=0.1)
odds = st.number_input("‚öñÔ∏è ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢ (1.0 = ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏∏‡∏ô)", min_value=0.1, value=1.0, step=0.1)
first_bet = st.number_input("üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏£‡∏Å (‡∏ö‡∏≤‡∏ó)", min_value=0.1, value=30.0, step=1.0)

# ‡πÄ‡∏Å‡πá‡∏ö snapshot ‡∏Ç‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡∏µ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡∏ï‡πå (‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô Undo / Import)
st.session_state.inputs_snapshot = dict(
    capital=capital, num_trades=num_trades,
    target_profit=target_profit, odds=odds, first_bet=first_bet
)

# ===================== Maximum Trades Calc =====================
max_bet_amount = first_bet
loss_streak_amount_tmp = 0
temp_capital = capital
max_trades_possible = 0

while temp_capital >= max_bet_amount and max_trades_possible < 100000:
    temp_capital -= max_bet_amount
    loss_streak_amount_tmp += max_bet_amount
    max_trades_possible += 1
    max_bet_amount = math.ceil((loss_streak_amount_tmp + target_profit) / odds) if odds > 0 else float("inf")

st.info(f"üí° ‡∏ñ‡πâ‡∏≤‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÑ‡∏°‡πâ ‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î **{max_trades_possible} ‡πÑ‡∏°‡πâ** ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏ô‡∏à‡∏∞‡∏´‡∏°‡∏î")

# ===================== Reset Button =====================
col_reset, col_lock = st.columns([1,1])
with col_reset:
    if st.button("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà (Reset State)"):
        st.session_state.results = []
        st.session_state.balance = capital
        st.session_state.bet_amount = first_bet
        st.session_state.loss_streak_amount = 0
        if not st.session_state.locked_patterns:
            st.session_state.patterns = [random.choice(["‡∏û‡∏∏‡∏ò", "‡∏Ñ‡∏≠"]) for _ in range(num_trades)]

with col_lock:
    st.write(" ")  # spacer
    st.caption("‡∏´‡∏≤‡∏Å‡∏•‡πá‡∏≠‡∏Å Pattern ‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï")

# ===================== Pattern Bootstrap =====================
# ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ pattern: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏° num_trades ‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
if not st.session_state.patterns or (not st.session_state.locked_patterns and len(st.session_state.patterns) != num_trades):
    st.session_state.patterns = [random.choice(["‡∏û‡∏∏‡∏ò", "‡∏Ñ‡∏≠"]) for _ in range(num_trades)]
elif st.session_state.locked_patterns and len(st.session_state.patterns) < num_trades:
    # ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°
    need = num_trades - len(st.session_state.patterns)
    if need > 0:
        st.session_state.patterns += [random.choice(["‡∏û‡∏∏‡∏ò", "‡∏Ñ‡∏≠"]) for _ in range(need)]
elif st.session_state.locked_patterns and len(st.session_state.patterns) > num_trades:
    # ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ
    st.session_state.patterns = st.session_state.patterns[:num_trades]

# ===================== Initialize Running State =====================
if st.session_state.balance is None:
    st.session_state.balance = capital
if st.session_state.bet_amount is None:
    st.session_state.bet_amount = first_bet

# ===================== Helper: Next bet calc =====================
def compute_next_bet(current_bet, loss_sum, result):
    if result == "‡∏ä‡∏ô‡∏∞":
        return first_bet, 0  # next bet, next loss_sum
    elif result == "‡πÅ‡∏û‡πâ":
        next_loss_sum = loss_sum + current_bet
        next_bet = math.ceil((next_loss_sum + target_profit) / odds) if odds > 0 else current_bet
        return next_bet, next_loss_sum
    else:
        return current_bet, loss_sum

# ===================== Helper: Recompute from results =====================
def recompute_state_from_results(results):
    bal = capital
    bet = first_bet
    loss_sum = 0
    recomputed_rows = []
    for row in results:
        res = row.get("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", "-")
        patt = row.get("Pattern", "‡∏û‡∏∏‡∏ò")

        # bet for this row (current bet before applying result)
        current_bet = bet

        if res == "‡∏ä‡∏ô‡∏∞":
            profit = current_bet * odds
            bal += profit
            next_bet = first_bet
            next_loss_sum = 0
        elif res == "‡πÅ‡∏û‡πâ":
            bal -= current_bet
            next_loss_sum = loss_sum + current_bet
            next_bet = math.ceil((next_loss_sum + target_profit) / odds) if odds > 0 else current_bet
        else:
            # no-op
            next_bet = current_bet
            next_loss_sum = loss_sum

        recomputed_rows.append({
            "‡πÑ‡∏°‡πâ": row.get("‡πÑ‡∏°‡πâ"),
            "Pattern": patt,
            "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå": res,
            "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô(‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)": current_bet,
            "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ": next_bet,
            "‡∏û‡∏≠‡∏£‡πå‡∏ï": round(bal, 2)
        })

        # update state for next row
        bet = next_bet
        loss_sum = next_loss_sum

    return bal, bet, loss_sum, recomputed_rows

# ===================== Import / Export =====================
st.subheader("üì•üì§ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ / ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
exp_col, imp_col = st.columns(2)

with exp_col:
    if st.session_state.results:
        export_df = pd.DataFrame(st.session_state.results)
        csv_bytes = export_df.to_csv(index=False).encode("utf-8-sig")
        st.download_button(
            label="‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (CSV)",
            data=csv_bytes,
            file_name=f"results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            use_container_width=True
        )
    else:
        st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")

with imp_col:
    uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•", type=["csv"])
    if uploaded is not None:
        try:
            df_imp = pd.read_csv(uploaded)
            required_cols = {"‡πÑ‡∏°‡πâ", "Pattern", "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"}
            if not required_cols.issubset(set(df_imp.columns)):
                st.error("‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: ‡πÑ‡∏°‡πâ, Pattern, ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
            else:
                # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° '‡πÑ‡∏°‡πâ' ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á list of dict
                df_imp = df_imp.sort_values(by("‡πÑ‡∏°‡πâ")) if "‡πÑ‡∏°‡πâ" in df_imp.columns else df_imp
                df_imp = df_imp.reset_index(drop=True)
                loaded = df_imp[["‡πÑ‡∏°‡πâ", "Pattern", "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"]].to_dict(orient="records")
                bal, bet, loss_sum, recomputed = recompute_state_from_results(loaded)
                st.session_state.results = recomputed
                st.session_state.balance = bal
                st.session_state.bet_amount = bet
                st.session_state.loss_streak_amount = loss_sum
                # ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å pattern ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤
                st.session_state.patterns = df_imp["Pattern"].tolist() + st.session_state.patterns[len(df_imp):]
                st.success("‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å CSV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ")
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")

# ===================== Results Input Loop =====================
st.subheader("üßÆ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏°‡πâ")
for trade in range(1, int(num_trades) + 1):
    col1, col2, col3, col4, col5 = st.columns([0.7, 1, 1, 1.2, 1.3])
    col1.write(f"‡πÑ‡∏°‡πâ {trade}")
    col2.write(f"({st.session_state.patterns[trade-1]})")

    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_bet = st.session_state.bet_amount if trade == len(st.session_state.results) + 1 else (
        st.session_state.results[trade-1]["‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"] if len(st.session_state.results) >= trade else st.session_state.bet_amount
    )
    col3.write(f"‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{current_bet}**")

    prior = st.session_state.results[trade-1]["‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"] if len(st.session_state.results) >= trade else "-"
    result = col4.selectbox("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", ["-", "‡∏ä‡∏ô‡∏∞", "‡πÅ‡∏û‡πâ"], key=f"res_{trade}", index=["-","‡∏ä‡∏ô‡∏∞","‡πÅ‡∏û‡πâ"].index(prior) if prior in ["-","‡∏ä‡∏ô‡∏∞","‡πÅ‡∏û‡πâ"] else 0)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì next bet (preview) ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
    preview_next_bet, _ = compute_next_bet(current_bet, st.session_state.loss_streak_amount if trade == len(st.session_state.results) + 1 else 0, result)
    col5.metric("‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß)", preview_next_bet)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if result != "-" and trade == len(st.session_state.results) + 1:
        # next values based on result
        if result == "‡∏ä‡∏ô‡∏∞":
            profit = current_bet * odds
            st.session_state.balance += profit
            next_bet = first_bet
            st.session_state.loss_streak_amount = 0
        elif result == "‡πÅ‡∏û‡πâ":
            st.session_state.balance -= current_bet
            st.session_state.loss_streak_amount += current_bet
            next_bet = math.ceil((st.session_state.loss_streak_amount + target_profit) / odds) if odds > 0 else current_bet
        else:
            next_bet = current_bet

        st.session_state.results.append({
            "‡πÑ‡∏°‡πâ": trade,
            "Pattern": st.session_state.patterns[trade-1],
            "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå": result,
            "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô(‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)": current_bet,
            "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ": next_bet,
            "‡∏û‡∏≠‡∏£‡πå‡∏ï": round(st.session_state.balance, 2)
        })
        st.session_state.bet_amount = next_bet  # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πâ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

# ===================== Undo =====================
st.subheader("‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (Undo)")
if st.button("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 1 ‡πÑ‡∏°‡πâ"):
    if st.session_state.results:
        trimmed = st.session_state.results[:-1]
        bal, bet, loss_sum, recomputed = recompute_state_from_results(trimmed)
        st.session_state.results = recomputed
        st.session_state.balance = bal
        st.session_state.bet_amount = bet
        st.session_state.loss_streak_amount = loss_sum
        st.success("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 1 ‡πÑ‡∏°‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")

# ===================== Display =====================
if st.session_state.results:
    df = pd.DataFrame(st.session_state.results)
    st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
    st.dataframe(df, use_container_width=True, hide_index=True)

    st.subheader("üìà Equity Curve")
    fig, ax = plt.subplots()
    ax.plot(df["‡πÑ‡∏°‡πâ"], df["‡∏û‡∏≠‡∏£‡πå‡∏ï"], marker="o")
    ax.set_xlabel("‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà")
    ax.set_ylabel("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏ö‡∏≤‡∏ó)")
    ax.set_title("‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï")
    ax.grid(True)
    st.pyplot(fig)

    total_profit = st.session_state.balance - capital
    st.success(f"‚úÖ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {total_profit:,.2f} ‡∏ö‡∏≤‡∏ó")
else:
    st.caption("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
