import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏∏‡πâ‡∏ô", page_icon="üìä", layout="centered", initial_sidebar_state="collapsed")

st.title("üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏∏‡πâ‡∏ô")
st.markdown("‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏≠‡∏£‡πå‡∏ï")

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session
if "trades" not in st.session_state:
    st.session_state.trades = []
if "capital" not in st.session_state:
    st.session_state.capital = 100000.0

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
with st.form("trade_form"):
    capital = st.number_input("üí∞ ‡∏ó‡∏∏‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó)", value=st.session_state.capital, step=1000.0, format="%.2f")
    risk_percent = st.number_input("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (%)", min_value=0.0, value=2.0, step=0.1)
    entry = st.number_input("üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=50.0, step=0.1)
    stop_loss = st.number_input("üìâ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏±‡∏î‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=48.0, step=0.1)
    target = st.number_input("üéØ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏Å‡∏≥‡πÑ‡∏£ (‡∏ö‡∏≤‡∏ó)", min_value=0.0, value=55.0, step=0.1)
    result = st.selectbox("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", ["-", "‡∏ä‡∏ô‡∏∞", "‡πÅ‡∏û‡πâ"])
    note = st.text_input("üóí ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", value="")
    submitted = st.form_submit_button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

if submitted:
    if entry == stop_loss:
        st.error("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stop Loss ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô!")
    else:
        risk_per_trade = capital * (risk_percent / 100)
        risk_per_share = abs(entry - stop_loss)
        position_size = risk_per_trade / risk_per_share
        rr_ratio = abs(target - entry) / risk_per_share
        profit_loss = 0

        if result == "‡∏ä‡∏ô‡∏∞":
            profit_loss = (target - entry) * position_size
        elif result == "‡πÅ‡∏û‡πâ":
            profit_loss = (stop_loss - entry) * position_size

        new_capital = capital + profit_loss
        st.session_state.capital = new_capital

        st.success(f"üìå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠: {position_size:.2f} ‡∏´‡∏∏‡πâ‡∏ô")
        st.info(f"üìä R:R = {rr_ratio:.2f}")
        if result != "-":
            st.write(f"üíπ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {profit_loss:.2f} ‡∏ö‡∏≤‡∏ó | ‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà: {new_capital:.2f} ‡∏ö‡∏≤‡∏ó")

        st.session_state.trades.append({
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "‡∏ó‡∏∏‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤": capital,
            "Entry": entry,
            "Stop Loss": stop_loss,
            "Target": target,
            "‡∏Ç‡∏ô‡∏≤‡∏î‡∏ã‡∏∑‡πâ‡∏≠": position_size,
            "R:R": rr_ratio,
            "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå": result,
            "‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô": profit_loss,
            "‡∏ó‡∏∏‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏î": new_capital,
            "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": note
        })

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
if st.session_state.trades:
    df = pd.DataFrame(st.session_state.trades)
    st.subheader("üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
    st.dataframe(df)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    wins = df[df["‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"] == "‡∏ä‡∏ô‡∏∞"].shape[0]
    losses = df[df["‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"] == "‡πÅ‡∏û‡πâ"].shape[0]
    total_trades = wins + losses
    win_rate = (wins / total_trades * 100) if total_trades > 0 else 0
    avg_return = df["‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"].mean() if total_trades > 0 else 0

    st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏≠‡∏£‡πå‡∏ï")
    st.write(f"Win Rate: {win_rate:.2f}%")
    st.write(f"Average Return ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î: {avg_return:.2f} ‡∏ö‡∏≤‡∏ó")

    # ‡∏Å‡∏£‡∏≤‡∏ü Equity Curve
    st.subheader("üìä Equity Curve")
    plt.plot(df["‡∏ó‡∏∏‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏î"])
    plt.xlabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
    plt.ylabel("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏û‡∏≠‡∏£‡πå‡∏ï (‡∏ö‡∏≤‡∏ó)")
    plt.grid(True)
    st.pyplot(plt)
